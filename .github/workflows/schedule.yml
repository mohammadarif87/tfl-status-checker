name: Check TFL Line Status

on:
  workflow_dispatch:
  schedule:
    - cron: '15 6 * * 1-5'  # 06:15 UTC (Morning 1st)
    - cron: '00 7 * * 1-5'  # 07:00 UTC (Morning 2nd)
    - cron: '45 7 * * 1-5'  # 07:45 UTC (Morning 3rd)
    - cron: '30 15 * * 1-5' # 15:30 UTC (Evening 1st)
    - cron: '15 16 * * 1-5' # 16:15 UTC (Evening 2nd)
    - cron: '00 17 * * 1-5' # 17:00 UTC (Evening 3rd)

jobs:
  check-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.14.0

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh jq
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Determine cache date and run slot
        id: slot
        run: |
          CACHE_DATE=$(date -u +%Y%m%d)
          echo "CACHE_DATE=$CACHE_DATE" >> $GITHUB_ENV
          
          # Determine if this is morning or evening block based on current time
          HOUR=$(date -u +%H)
          if [ "$HOUR" -lt 12 ]; then
            BLOCK="morning"
          else
            BLOCK="evening"
          fi
          echo "BLOCK=$BLOCK" >> $GITHUB_ENV
          
          PREFIX="${{ runner.os }}-previous-disruptions-${CACHE_DATE}-${BLOCK}-"
          # Count existing caches for this block to derive the run slot (1..3)
          COUNT=$(gh cache list --key "$PREFIX" --json id --jq '.[].id' | wc -l | tr -d ' ')
          if [ -z "$COUNT" ]; then COUNT=0; fi
          RUN_SLOT=$((COUNT + 1))
          echo "RUN_SLOT=$RUN_SLOT" >> $GITHUB_ENV
          echo "slot=$RUN_SLOT" >> $GITHUB_OUTPUT
          echo "block=$BLOCK" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GH_REPO: ${{ github.repository }}

      - name: Cache previous disruptions
        uses: actions/cache@v3
        id: cache
        with:
          path: previous_disruptions.json
          key: ${{ runner.os }}-previous-disruptions-${{ env.CACHE_DATE }}-${{ env.BLOCK }}-${{ env.RUN_SLOT }}
          restore-keys: |
            ${{ runner.os }}-previous-disruptions-${{ env.CACHE_DATE }}-${{ env.BLOCK }}-

      - name: Create empty previous disruptions file if not cached
        if: steps.cache.outputs.cache-hit != 'true'
        run: echo '[]' > previous_disruptions.json

      - name: Install dependencies
        run: npm install

      - name: Run script
        run: |
          echo "Debug: CACHE_DATE=$CACHE_DATE, BLOCK=$BLOCK, RUN_SLOT=$RUN_SLOT"
          node checkTflApi.js
        env:
          SLACK_BOT_TFL_TOKEN: ${{ secrets.SLACK_BOT_TFL_TOKEN }}
          SLACK_CHANNEL_TFL: ${{ secrets.SLACK_CHANNEL_TFL }}
          RUN_SLOT: ${{ env.RUN_SLOT }}
          BLOCK: ${{ env.BLOCK }}

      - name: Save previous disruptions to cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: previous_disruptions.json
          key: ${{ runner.os }}-previous-disruptions-${{ env.CACHE_DATE }}-${{ env.BLOCK }}-${{ env.RUN_SLOT }}
          upload-chunk-size: 32MB

      - name: Delete cache for specific runs
        if: always() && env.RUN_SLOT == '3'
        run: |
          echo "Deleting all caches for ${{ env.BLOCK }} block..."
          CACHE_PREFIX="${{ runner.os }}-previous-disruptions-${{ env.CACHE_DATE }}-${{ env.BLOCK }}-"
          gh cache list --key "$CACHE_PREFIX" --json id --jq '.[].id' | while read -r cache_id; do
            echo "Deleting cache ID: $cache_id"
            gh cache delete "$cache_id"
          done
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GH_REPO: ${{ github.repository }}

